@page "/lista-de-livros"
@rendermode InteractiveServer

@using BibliotecaCarvalhoPereira.Components.Pages.Share
@using BibliotecaCarvalhoPereira.Models
@using BibliotecaCarvalhoPereira.Services

@inject LivroService LivroRepository
@inject IJSRuntime JSRuntime

<PageTitle>Lista de Livro(s)</PageTitle>

<div class="card mb-4">
    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h6 class="mb-0">
            Livros Registados
            <span class="badge bg-light text-primary ms-1">@_livro.Count</span>
        </h6>
        
        <div>
            <input type="text" class="form-control" placeholder="pesquisar..." 
                @bind-value="_termoPesquisa" @bind-value:event="oninput" @onkeyup="Filtrar" />
        </div>
    </div>

    @if (!_livro.Any())
    {
        <div class="alert alert-info" role="alert">
            Nenhum livro registado.
        </div>
    }
    else 
    {
        <div class="card-body">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Autor</th>
                        <th>Assunto</th>
                        <th>Idioma</th>
                        <th>Gênero</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var l in _filtrarLivro)
                    {
                        <tr class="align-middle">
                            <td>@l.Titulo</td>
                            <td>@l.Autor</td>
                            <td>@l.Assunto</td>
                            <td>@l.Idioma</td>
                            <td>@l.Genero</td>
                            <td>
                                <a href="/editar/@l.Id" class="btn btn-info btn-sm me-2">
                                    Editar
                                </a>

                                <button class="btn btn-danger btn-sm" @onclick="() => Remover(l.Id)">
                                    Deletar
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    <div class="card-footer">
        <small class="text-muted">@_filtrarLivro.Count de @_livro.Count livro(s) registado(s).</small>
    </div>
</div>

<Alerta Mensagem="@_mensagem" Sucesso="@_sucesso"/>

@code {
    private List<Livro> _livro = [];
    private List<Livro> _filtrarLivro = [];
    private string? _mensagem;
    private string ? _termoPesquisa;
    private bool _sucesso;

    /// <summary>
    /// Método executado quando o componente é inicializado. 
    /// Ele é responsável por carregar a lista de livros da Base de Dados.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _filtrarLivro = _livro = await LivroRepository.ListarAsync();
        }
        catch (Exception ex)
        {
            _mensagem = $"Erro ao carregar o(s) livro(s): {ex.Message}";
        }
    }

    /// <summary>
    /// Método responsável por remover um livro da Base de Dados.
    /// </summary>
    /// <param name="id">Identificador do livro.</param>
    private async Task Remover(int id)
    {
        try
        {
            Livro? livro = _livro.FirstOrDefault(l => l.Id == id);
            string? tituloLivro = livro?.Titulo;
            
            bool desejaRemover = await JSRuntime.InvokeAsync<bool>("confirm", $"Deseja remover o livro {tituloLivro}?");

            if (!desejaRemover) return; 
            
            await LivroRepository.RemoverAsync(id);
            
            _mensagem = "Livro removido com sucesso.";
            _sucesso = true;
            _livro = _livro.Where(l => l.Id != id).ToList();
            
            Filtrar();
        }
        catch (Exception ex)
        {
            _mensagem = $"Erro ao remover o livro: {ex.Message}";
            _sucesso = false;
        }
        finally
        {
            await Task.Delay(3000);
            _mensagem = string.Empty;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Método responsável por filtrar a lista de livros com base no termo de pesquisa.
    /// </summary>
    private void Filtrar()
    {
        if (string.IsNullOrWhiteSpace(_termoPesquisa))
        {
            _filtrarLivro = _livro;
        }
        else
        {
            string termo = _termoPesquisa.ToLower();

            _filtrarLivro = _livro.Where(
                l => l.Titulo?.ToLower().Contains(termo) == true ||
                l.Autor?.ToLower().Contains(termo) == true ||
                l.Assunto?.ToLower().Contains(termo) == true ||
                l.Idioma?.ToLower().Contains(termo) == true ||
                l.Genero?.ToLower().Contains(termo) == true
            ).ToList();
        }
    }
}
