@page "/"
@rendermode InteractiveServer

@using BCP.Components.Pages.Share
@using BCP.Models
@using BCP.Services

@inject BookOperation Operation

<PageTitle>Adicionar Livro</PageTitle>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-11 col-xl-12">
            <EditForm Model="_book" OnValidSubmit="SubmitAddBook" FormName="addBookForm" class="needs-validation">
                <DataAnnotationsValidator />

                <Form Book="_book" />

                <!-- Botões de Ação -->
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex gap-2 justify-content-end">
                            <button type="button" class="btn btn-outline-secondary" @onclick="ClearForm">
                                <i class="bi bi-x-circle"></i> Limpar
                            </button>

                            <button type="submit" class="btn btn-primary" disabled="@_save">
                                @if (_save)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Salvando...</span>
                                }
                                else
                                {
                                    <i class="bi bi-check-circle"></i><span>Salvar</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<InfoModal Message="@_message" Success="@_success" />

@code {
    private Book _book = new();
    private string? _message;
    private bool _save;
    private bool _success;

    private async Task SubmitAddBook()
    {
        try
        {
            _save = true;

            await Operation.AddBookAsync(_book);

            _message = $"Livro {_book.Title} adicionado com sucesso!";
            _success = true;
            
            ClearForm();
        }
        catch (Exception erro)
        {
            _message = $"Erro ao adicionar o livro: {erro.Message}";
            _success = false;
        }
        finally
        {
            _save = false;
            StateHasChanged();
            await Task.Delay(3000);
            _message = string.Empty;
        }    
    }

    private void ClearForm()
    {
        _book = new Book();
        StateHasChanged();
    }
}

